@go.Package { name = "github.com/47monad/sercon/go-gen/svcconf" }
@ModuleInfo { minPklVersion = "0.26.0" }
module o47monad.sercon.ServiceConfig

import "package://pkg.pkl-lang.org/pkl-go/pkl.golang@0.8.0#/go.pkl"
import "./db/MongodbConfig.pkl"
import "./monitoring/PrometheusConfig.pkl"
import "./log/LogConfig.pkl"
import "./GrpcConfig.pkl"

typealias Port = UInt16(this > 0)

name: String = ""
version: String = ""

ports: Mapping<String, Port> = new Mapping<String, Port> {
  ["port"] = read?("env:PORT")?.toInt() ?? 4746
  ["grpc"] = read?("env:GRPC_PORT")?.toInt() ?? 4747
  ["http"] = read?("env:HTTP_PORT")?.toInt() ?? 4749
}

host: String = "127.0.0.1"

env: String = read?("env:ENV") ?? "production"

debugMode: Boolean = read?("env:DEBUG_MODE")?.toBoolean() ?? false

log: LogConfig = new LogConfig {
  level = let (lvl = read?("env:LOG_LEVEL")?.toString() ?? "error") lvl as LogConfig.Level
}

grpc: GrpcConfig? = new GrpcConfig {
  healthCheckEnabled = read?("env:GRPC_HEALTH_CHECK_ENABLED")?.toBoolean() ?? true
  reflectionEnabled = read?("env:GRPC_REFLECTION_ENABLED")?.toBoolean() ?? false
  loggingEnabled = read?("env:GRPC_LOGGING_ENABLED")?.toBoolean() ?? true
}

mongodb: MongodbConfig? = new MongodbConfig {
  enabled = false
  uri = read?("env:MONGO_URI")
  dbName = read("env:MONGO_DB").toString()
}

prometheus: PrometheusConfig = new PrometheusConfig {
  enabled = false
  useGrpcMetrics = false
}
